#ifndef UMUQ_PSRANDOM_GAMMADISTRIBUTION_H
#define UMUQ_PSRANDOM_GAMMADISTRIBUTION_H

namespace umuq
{
namespace randomdist
{

/*! \class gammaDistribution
 * \brief Generates random positive values x, distributed according to probability density function \f \frac{e^{-x/\beta}}{\beta ^\alpha \Gamma(\alpha)} x^{\alpha -1} \f$ 
 * where \f$ \alpha \f$ is known as the shape parameter and \f$ \beta \f$ is known as the scale parameter.
 * 
 * NOTE: This should be called after setting the State of psrandom object
 * 
 */
template <typename T>
class gammaDistribution
{
  public:
    /*!
     * \brief Construct a new gamma Distribution object
     * 
     */
    gammaDistribution();

    /*!
     * \brief Construct a new Gamma distribution object
     * 
     * \param alpha  Shape parameter \f$\alpha\f$
     * \param beta   Scale parameter \f$ beta\f$
     */
    gammaDistribution(T const alpha, T const beta = T{1});

    /*!
     * \brief Move constructor, construct a new gammaDistribution object from input gammaDistribution object
     * 
     * \param other  Input gammaDistribution object
     */
    gammaDistribution(gammaDistribution<T> &&other);

    /*!
     * \brief Move assignment operator
     * 
     * \param other  Input gammaDistribution object
     * \return gammaDistribution& 
     */
    gammaDistribution<T> &operator=(gammaDistribution<T> &&other);

    /*!
     * \brief Random numbers x according to probability density function \f$ \lambda e^{-\lambda x} \f$ 
     * The result type generated by the generator is undefined if @T is not one of float, 
     * double, or long double
     * 
     * \return Random numbers x according to probability density function \f$ \lambda e^{-\lambda x} \f$ 
     * 
     */
    inline T operator()();

    /*!
     * \brief Random numbers x according to probability density function \f$ \lambda e^{-\lambda x} \f$ 
     * The result type generated by the generator is undefined if @T is not one of float, 
     * double, or long double
     * 
     * \return Random numbers x according to probability density function \f$ \lambda e^{-\lambda x} \f$ 
     * 
     */
    inline T dist();

  private:
    // Make it noncopyable
    gammaDistribution(gammaDistribution<T> const &) = delete;

    // Make it not assignable
    gammaDistribution<T> &operator=(gammaDistribution<T> const &) = delete;

  private:
    //! Random numbers according to to probability density function \f$ \lambda e^{-\lambda x} \f$
    std::gamma_distribution<T> d;
};

template <typename T>
gammaDistribution<T>::gammaDistribution() : d(T{1}, T{1})
{
    if (!PRNG_initialized)
    {
        UMUQFAIL("One should set the current state of the engine before constructing this object!");
    }
}

template <typename T>
gammaDistribution<T>::gammaDistribution(T const alpha, T const beta) : d(alpha, beta)
{
    if (!PRNG_initialized)
    {
        UMUQFAIL("One should set the current state of the engine before constructing this object!");
    }
}

template <typename T>
gammaDistribution<T>::gammaDistribution(gammaDistribution<T> &&other) : d(std::move(other.d)) {}

template <typename T>
gammaDistribution<T> &gammaDistribution<T>::operator=(gammaDistribution<T> &&other)
{
    d = std::move(other.d);
    return *this;
}

template <typename T>
inline T gammaDistribution<T>::operator()()
{
    // Get the thread ID
    int const me = torc_i_worker_id();
    return d(NumberGenerator[me]);
}

template <typename T>
inline T gammaDistribution<T>::dist()
{
    // Get the thread ID
    int const me = torc_i_worker_id();
    return d(NumberGenerator[me]);
}

} // namespace randomdist
} // namespace umuq

#endif // UMUQ_PSRANDOM_GAMMADISTRIBUTION
