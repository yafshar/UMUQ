#ifndef UMUQ_PSRANDOM_EXPONENTIALDISTRIBUTION_H
#define UMUQ_PSRANDOM_EXPONENTIALDISTRIBUTION_H

namespace umuq
{
namespace randomdist
{

/*! \class exponentialDistribution
 * \brief Generates random non-negative values x, distributed according to probability density function \f$ \lambda e^{-\lambda x} \f$ 
 * 
 * NOTE: This should be called after setting the State of psrandom object
 * 
 */
template <typename T>
class exponentialDistribution
{
  public:
    /*!
     * \brief Construct a new exponential Distribution object
     * 
     */
    exponentialDistribution();

    /*!
     * \brief Construct a new exponential distribution object
     * 
     * \param mu Mean, \f$ \mu \f$
     */
    explicit exponentialDistribution(T const mu);

    /*!
     * \brief Move constructor, construct a new exponentialDistribution object from input exponentialDistribution object
     * 
     * \param other  Input exponentialDistribution object
     */
    exponentialDistribution(exponentialDistribution<T> &&other);

    /*!
     * \brief Move assignment operator
     * 
     * \param other  Input exponentialDistribution object
     * \return exponentialDistribution& 
     */
    exponentialDistribution<T> &operator=(exponentialDistribution<T> &&other);

    /*!
     * \brief Random numbers x according to probability density function \f$ \lambda e^{-\lambda x} \f$ 
     * The result type generated by the generator is undefined if @T is not one of float, 
     * double, or long double
     * 
     * \return Random numbers x according to probability density function \f$ \lambda e^{-\lambda x} \f$ 
     * 
     */
    inline T operator()();

    /*!
     * \brief Random numbers x according to probability density function \f$ \lambda e^{-\lambda x} \f$ 
     * The result type generated by the generator is undefined if @T is not one of float, 
     * double, or long double
     * 
     * \return Random numbers x according to probability density function \f$ \lambda e^{-\lambda x} \f$ 
     * 
     */
    inline T dist();

  private:
    // Make it noncopyable
    exponentialDistribution(exponentialDistribution<T> const &) = delete;

    // Make it not assignable
    exponentialDistribution<T> &operator=(exponentialDistribution<T> const &) = delete;

  private:
    //! Random numbers according to to probability density function \f$ \lambda e^{-\lambda x} \f$
    std::exponential_distribution<T> d;
};

template <typename T>
exponentialDistribution<T>::exponentialDistribution() : d(1)
{
    if (!PRNG_initialized)
    {
        UMUQFAIL("One should set the current state of the engine before constructing this object!");
    }
}

template <typename T>
exponentialDistribution<T>::exponentialDistribution(T const mu) : d(mu)
{
    if (!PRNG_initialized)
    {
        UMUQFAIL("One should set the current state of the engine before constructing this object!");
    }
}

template <typename T>
exponentialDistribution<T>::exponentialDistribution(exponentialDistribution<T> &&other) : d(std::move(other.d)) {}

template <typename T>
exponentialDistribution<T> &exponentialDistribution<T>::operator=(exponentialDistribution<T> &&other)
{
    d = std::move(other.d);
    return *this;
}

template <typename T>
inline T exponentialDistribution<T>::operator()()
{
    // Get the thread ID
    int const me = torc_i_worker_id();
    return d(NumberGenerator[me]);
}

template <typename T>
inline T exponentialDistribution<T>::dist()
{
    // Get the thread ID
    int const me = torc_i_worker_id();
    return d(NumberGenerator[me]);
}

} // namespace randomdist
} // namespace umuq

#endif // UMUQ_PSRANDOM_EXPONENTIALDISTRIBUTION
