#ifndef UMUQ_PSRANDOM_LOGNORMALDISTRIBUTION_H
#define UMUQ_PSRANDOM_LOGNORMALDISTRIBUTION_H

namespace umuq
{

namespace randomdist
{

/*! \class lognormalDistribution
 * \ingroup Random_Module
 * 
 * \brief Generates random numbers x > 0 according to the lognormal_distribution
 * 
 * NOTE: This should be called after setting the State of psrandom object
 * 
 */
template <typename RealType = double>
class lognormalDistribution
{
   public:
     /*!
      * \brief Construct a new lognormalDistribution object (default mean = 0, stddev = 1)
      * 
      * \param mean    Mean
      * \param stddev  Standard deviation
      */
     lognormalDistribution(RealType mean = RealType{}, RealType stddev = RealType{1});

     /*!
      * \brief Move constructor, construct a new lognormalDistribution object from input lognormalDistribution object
      * 
      * \param other  Input lognormalDistribution object
      */
     lognormalDistribution(lognormalDistribution<RealType> &&other);

     /*!
      * \brief Move assignment operator
      * 
      * \param other  Input lognormalDistribution object
      * \return lognormalDistribution& 
      */
     lognormalDistribution<RealType> &operator=(lognormalDistribution<RealType> &&other);

     /*!
      * \brief Random numbers x according to Normal (or Gaussian) random number distribution
      * The result type generated by the generator is undefined if RealType is not one of float, 
      * double, or long double
      * 
      * \return Random numbers x according to Normal (or Gaussian) random number distribution
      */
     inline RealType operator()();

     /*!
      * \brief Random numbers x according to Normal (or Gaussian) random number distribution
      * The result type generated by the generator is undefined if RealType is not one of float, 
      * double, or long double
      * 
      * \return Random numbers x according to Normal (or Gaussian) random number distribution
      */
     inline RealType dist();

   private:
     // Make it noncopyable
     lognormalDistribution(lognormalDistribution<RealType> const &) = delete;

     // Make it not assignable
     lognormalDistribution<RealType> &operator=(lognormalDistribution<RealType> const &) = delete;

   private:
     /*! Lognormal_distribution random number distribution */
     std::lognormal_distribution<RealType> d;
};

template <typename RealType>
lognormalDistribution<RealType>::lognormalDistribution(RealType mean, RealType stddev) : d(mean, stddev)
{
     if (!std::is_floating_point<RealType>::value)
     {
          UMUQFAIL("This type is not supported in this class!");
     }
}

template <typename RealType>
lognormalDistribution<RealType>::lognormalDistribution(lognormalDistribution<RealType> &&other) : d(std::move(other.d)) {}

template <typename RealType>
lognormalDistribution<RealType> &lognormalDistribution<RealType>::operator=(lognormalDistribution<RealType> &&other)
{
     d = std::move(other.d);
     return *this;
}

template <typename RealType>
inline RealType lognormalDistribution<RealType>::operator()()
{
     // Get the thread ID
     int const me = PRNG_initialized ? torc_i_worker_id() : 0;
     return d(NumberGenerator[me]);
}

template <typename RealType>
inline RealType lognormalDistribution<RealType>::dist()
{
     // Get the thread ID
     int const me = PRNG_initialized ? torc_i_worker_id() : 0;
     return d(NumberGenerator[me]);
}

} // namespace randomdist
} // namespace umuq

#endif // UMUQ_PSRANDOM_LOGNORMALDISTRIBUTION
