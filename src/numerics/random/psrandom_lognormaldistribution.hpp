#ifndef UMUQ_PSRANDOM_LOGNORMALDISTRIBUTION_H
#define UMUQ_PSRANDOM_LOGNORMALDISTRIBUTION_H

namespace umuq
{
namespace randomdist
{

/*! \class lognormalDistribution
 * \brief Generates random numbers x > 0 according to the lognormal_distribution
 * 
 * NOTE: This should be called after setting the State of psrandom object
 * 
 */
template <typename T = double>
class lognormalDistribution
{
  public:
    /*!
     * \brief Construct a new lognormalDistribution object (default mean = 0, stddev = 1)
     * 
     * \param mean    Mean
     * \param stddev  Standard deviation
     * 
     */
    lognormalDistribution(T mean = T{}, T stddev = T{1});

    /*!
     * \brief Move constructor, construct a new lognormalDistribution object from input lognormalDistribution object
     * 
     * \param other  Input lognormalDistribution object
     */
    lognormalDistribution(lognormalDistribution<T> &&other);

    /*!
     * \brief Move assignment operator
     * 
     * \param other  Input lognormalDistribution object
     * \return lognormalDistribution& 
     */
    lognormalDistribution<T> &operator=(lognormalDistribution<T> &&other);

    /*!
     * \brief Random numbers x according to Normal (or Gaussian) random number distribution
     * The result type generated by the generator is undefined if T is not one of float, 
     * double, or long double
     * 
     * \return Random numbers x according to Normal (or Gaussian) random number distribution
     * 
     */
    inline T operator()();

    /*!
     * \brief Random numbers x according to Normal (or Gaussian) random number distribution
     * The result type generated by the generator is undefined if T is not one of float, 
     * double, or long double
     * 
     * \return Random numbers x according to Normal (or Gaussian) random number distribution
     * 
     */
    inline T dist();

  private:
    // Make it noncopyable
    lognormalDistribution(lognormalDistribution<T> const &) = delete;

    // Make it not assignable
    lognormalDistribution<T> &operator=(lognormalDistribution<T> const &) = delete;

  private:
    //! Lognormal_distribution random number distribution
    std::lognormal_distribution<T> d;
};

/*! \class logNormalDistribution
 * \brief Generates random numbers x > 0 according to the lognormal_distribution
 * 
 * NOTE: This can be called without setting the State of psrandom object
 * 
 */
template <typename T = double>
class logNormalDistribution
{
  public:
    /*!
     * \brief Construct a new logNormalDistribution object (default mean = 0, stddev = 1)
     * 
     * \param mean    Mean
     * \param stddev  Standard deviation
     * 
     */
    logNormalDistribution(T mean = T{}, T stddev = T{1});

    /*!
     * \brief Move constructor, construct a new logNormalDistribution object from input logNormalDistribution object
     * 
     * \param other  Input logNormalDistribution object
     */
    logNormalDistribution(logNormalDistribution<T> &&other);

    /*!
     * \brief Move assignment operator
     * 
     * \param other  Input logNormalDistribution object
     * \return logNormalDistribution& 
     */
    logNormalDistribution<T> &operator=(logNormalDistribution<T> &&other);

    /*!
     * \brief Random numbers x according to Normal (or Gaussian) random number distribution
     * The result type generated by the generator is undefined if T is not one of float, 
     * double, or long double
     * 
     * \return Random numbers x according to Normal (or Gaussian) random number distribution
     * 
     */
    inline T operator()();

    /*!
     * \brief Random numbers x according to Normal (or Gaussian) random number distribution
     * The result type generated by the generator is undefined if T is not one of float, 
     * double, or long double
     * 
     * \return Random numbers x according to Normal (or Gaussian) random number distribution
     * 
     */
    inline T dist();

  private:
    // Make it noncopyable
    logNormalDistribution(logNormalDistribution<T> const &) = delete;

    // Make it not assignable
    logNormalDistribution<T> &operator=(logNormalDistribution<T> const &) = delete;

  private:
    //! Random number engine based on Mersenne Twister algorithm.
    std::mt19937 gen;

    //! Lognormal_distribution random number distribution
    std::lognormal_distribution<T> d;
};

/*!
 * \brief Construct a new lognormalDistribution object (default mean = 0, stddev = 1)
 * 
 * \param mean    Mean
 * \param stddev  Standard deviation
 * 
 */
template <typename T>
lognormalDistribution<T>::lognormalDistribution(T mean, T stddev) : d(mean, stddev)
{
    if (!PRNG_initialized)
    {
        UMUQFAIL("One should set the current state of the engine before constructing this object!");
    }
}

/*!
 * \brief Move constructor, construct a new lognormalDistribution object from input lognormalDistribution object
 * 
 * \param other  Input lognormalDistribution object
 */
template <typename T>
lognormalDistribution<T>::lognormalDistribution(lognormalDistribution<T> &&other) : d(std::move(other.d)) {}

/*!
 * \brief Move assignment operator
 * 
 * \param other  Input lognormalDistribution object
 * \return lognormalDistribution& 
 */
template <typename T>
lognormalDistribution<T> &lognormalDistribution<T>::operator=(lognormalDistribution<T> &&other)
{
    d = std::move(other.d);
    return *this;
}

/*!
 * \brief Random numbers x according to Normal (or Gaussian) random number distribution
 * The result type generated by the generator is undefined if T is not one of float, 
 * double, or long double
 * 
 * \return Random numbers x according to Normal (or Gaussian) random number distribution
 * 
 */
template <typename T>
inline T lognormalDistribution<T>::operator()()
{
    // Get the thread ID
    int const me = torc_i_worker_id();
    return d(NumberGenerator[me]);
}

/*!
 * \brief Random numbers x according to Normal (or Gaussian) random number distribution
 * The result type generated by the generator is undefined if T is not one of float, 
 * double, or long double
 * 
 * \return Random numbers x according to Normal (or Gaussian) random number distribution
 * 
 */
template <typename T>
inline T lognormalDistribution<T>::dist()
{
    // Get the thread ID
    int const me = torc_i_worker_id();
    return d(NumberGenerator[me]);
}

/*!
 * \brief Construct a new logNormalDistribution object (default mean = 0, stddev = 1)
 * 
 * \param mean    Mean
 * \param stddev  Standard deviation
 * 
 */
template <typename T>
logNormalDistribution<T>::logNormalDistribution(T mean, T stddev) : gen(std::random_device{}()), d(mean, stddev) {}

/*!
 * \brief Move constructor, construct a new logNormalDistribution object from input logNormalDistribution object
 * 
 * \param other  Input logNormalDistribution object
 */
template <typename T>
logNormalDistribution<T>::logNormalDistribution(logNormalDistribution<T> &&other) : gen(std::move(other.gen)),
                                                                                    d(std::move(other.d)) {}

/*!
 * \brief Move assignment operator
 * 
 * \param other  Input logNormalDistribution object
 * \return logNormalDistribution& 
 */
template <typename T>
logNormalDistribution<T> &logNormalDistribution<T>::operator=(logNormalDistribution<T> &&other)
{
    gen = std::move(other.gen);
    d = std::move(other.d);
    return *this;
}

/*!
 * \brief Random numbers x according to the lognormal_distribution distribution
 * The result type generated by the generator is undefined if T is not one of float, 
 * double, or long double
 * 
 * \return Random random number \f$ x > 0 \f$ according to the lognormal_distribution
 * 
 */
template <typename T>
inline T logNormalDistribution<T>::operator()()
{
    return d(gen);
}

/*!
 * \brief Random numbers x according to the lognormal_distribution distribution
 * The result type generated by the generator is undefined if T is not one of float, 
 * double, or long double
 * 
 * \return Random random number \f$ x > 0 \f$ according to the lognormal_distribution
 * 
 */
template <typename T>
inline T logNormalDistribution<T>::dist()
{
    return d(gen);
}

} // namespace randomdist
} // namespace umuq

#endif // UMUQ_PSRANDOM_LOGNORMALDISTRIBUTION
