#ifndef UMUQ_PSRANDOM_NORMALDISTRIBUTION_H
#define UMUQ_PSRANDOM_NORMALDISTRIBUTION_H

namespace umuq
{

/*! \namespace umuq::randomdist
 * \ingroup Random_Module
 * 
 * \brief Namespace containing all necessary classes that generate random number distributions
 */
namespace randomdist
{

/*! \class normalDistribution
 * \ingroup Random_Module
 * 
 * \brief Generates random numbers according to the Normal (or Gaussian) random number distribution
 * 
 * \note
 * - This should be called after setting the State of psrandom object
 * 
 */
template <typename T = double>
class normalDistribution
{
public:
  /*!
   * \brief Construct a new normalDistribution object (default mean = 0, stddev = 1)
   * 
   * \param mean    Mean
   * \param stddev  Standard deviation
   * 
   */
  normalDistribution(T mean = T{}, T stddev = T{1});

  /*!
   * \brief Move constructor, construct a new normalDistribution object from input normalDistribution object
   * 
   * \param other  Input normalDistribution object
   */
  normalDistribution(normalDistribution<T> &&other);

  /*!
   * \brief Move assignment operator
   * 
   * \param other  Input normalDistribution object
   * \return normalDistribution& 
   */
  normalDistribution<T> &operator=(normalDistribution<T> &&other);

  /*!
   * \brief Random numbers x according to Normal (or Gaussian) random number distribution
   * The result type generated by the generator is undefined if T is not one of float, 
   * double, or long double
   * 
   * \return Random numbers x according to Normal (or Gaussian) random number distribution
   * 
   */
  inline T operator()();

  /*!
   * \brief Random numbers x according to Normal (or Gaussian) random number distribution
   * The result type generated by the generator is undefined if T is not one of float, 
   * double, or long double
   * 
   * \return Random numbers x according to Normal (or Gaussian) random number distribution
   * 
   */
  inline T dist();

private:
  // Make it noncopyable
  normalDistribution(normalDistribution<T> const &) = delete;

  // Make it not assignable
  normalDistribution<T> &operator=(normalDistribution<T> const &) = delete;

private:
  //! Random numbers according to the Normal (or Gaussian) random number distribution
  std::normal_distribution<T> d;
};

/*! \class NormalDistribution
 * \brief Generates random numbers according to the Normal (or Gaussian) random number distribution
 * 
 * \note 
 * - This can be called without setting the State of psrandom object
 *
 */
template <typename T = double>
class NormalDistribution
{
public:
  /*!
 * \brief Construct a new NormalDistribution object (default mean = 0, stddev = 1)
 * 
 * \param mean    Mean
 * \param stddev  Standard deviation
 * 
 */
  NormalDistribution(T mean = T{}, T stddev = T{1});

  /*!
 * \brief Move constructor, construct a new NormalDistribution object from input NormalDistribution object
 * 
 * \param other  Input NormalDistribution object
 */
  NormalDistribution(NormalDistribution<T> &&other);

  /*!
 * \brief Move assignment operator
 * 
 * \param other  Input NormalDistribution object
 * \return NormalDistribution& 
 */
  NormalDistribution<T> &operator=(NormalDistribution<T> &&other);

  /*!
 * \brief Random numbers x according to Normal (or Gaussian) random number distribution
 * The result type generated by the generator is undefined if T is not one of float, 
 * double, or long double
 * 
 * \return Random numbers x according to Normal (or Gaussian) random number distribution
 * 
 */
  inline T operator()();

  /*!
 * \brief Random numbers x according to Normal (or Gaussian) random number distribution
 * The result type generated by the generator is undefined if T is not one of float, 
 * double, or long double
 * 
 * \return Random numbers x according to Normal (or Gaussian) random number distribution
 * 
 */
  inline T dist();

private:
  // Make it noncopyable
  NormalDistribution(NormalDistribution<T> const &) = delete;

  // Make it not assignable
  NormalDistribution<T> &operator=(NormalDistribution<T> const &) = delete;

private:
  //! Random number engine based on Mersenne Twister algorithm.
  std::mt19937 gen;

  //! Random numbers according to the Normal (or Gaussian) random number distribution
  std::normal_distribution<T> d;
};

template <typename T>
normalDistribution<T>::normalDistribution(T mean, T stddev) : d(mean, stddev)
{
  if (!PRNG_initialized)
  {
    UMUQFAIL("One should set the current state of the engine before constructing this object!");
  }
}

template <typename T>
normalDistribution<T>::normalDistribution(normalDistribution<T> &&other) : d(std::move(other.d)) {}

template <typename T>
normalDistribution<T> &normalDistribution<T>::operator=(normalDistribution<T> &&other)
{
  d = std::move(other.d);
  return *this;
}

template <typename T>
inline T normalDistribution<T>::operator()()
{
  // Get the thread ID
  int const me = torc_i_worker_id();
  return d(NumberGenerator[me]);
}

template <typename T>
inline T normalDistribution<T>::dist()
{
  // Get the thread ID
  int const me = torc_i_worker_id();
  return d(NumberGenerator[me]);
}

template <typename T>
NormalDistribution<T>::NormalDistribution(T mean, T stddev) : gen(std::random_device{}()), d(mean, stddev) {}

template <typename T>
NormalDistribution<T>::NormalDistribution(NormalDistribution<T> &&other) : gen(std::move(other.gen)),
                                                                           d(std::move(other.d)) {}

template <typename T>
NormalDistribution<T> &NormalDistribution<T>::operator=(NormalDistribution<T> &&other)
{
  gen = std::move(other.gen);
  d = std::move(other.d);
  return *this;
}

template <typename T>
inline T NormalDistribution<T>::operator()() { return d(gen); }

template <typename T>
inline T NormalDistribution<T>::dist() { return d(gen); }

} // namespace randomdist
} // namespace umuq

#endif // UMUQ_PSRANDOM_NORMALDISTRIBUTION
